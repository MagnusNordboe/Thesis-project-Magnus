Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Zhou2021,
abstract = {The complexity and dynamism of microservice systems pose unique challenges to a variety of software engineering tasks such as fault analysis and debugging. In spite of the prevalence and importance of microservices in industry, there is limited research on the fault analysis and debugging of microservice systems. To fill this gap, we conduct an industrial survey to learn typical faults of microservice systems, current practice of debugging, and the challenges faced by developers in practice. We then develop a medium-size benchmark microservice system (being the largest and most complex open source microservice system within our knowledge) and replicate 22 industrial fault cases on it. Based on the benchmark system and the replicated fault cases, we conduct an empirical study to investigate the effectiveness of existing industrial debugging practices and whether they can be further improved by introducing the state-of-the-art tracing and visualization techniques for distributed systems. The results show that the current industrial practices of microservice debugging can be improved by employing proper tracing and visualization techniques and strategies. Our findings also suggest that there is a strong need for more intelligent trace analysis and visualization, e.g., by combining trace visualization and improved fault localization, and employing data-driven and learning-based recommendation for guided visual exploration and comparison of traces.},
author = {Zhou, Xiang and Peng, Xin and Xie, Tao and Sun, Jun and Ji, Chao and Li, Wenhai and Ding, Dan},
doi = {10.1109/TSE.2018.2887384},
file = {::},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Microservices,debugging,fault localization,tracing,visualization},
month = {feb},
number = {2},
pages = {243--260},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Fault Analysis and Debugging of Microservice Systems: Industrial Survey, Benchmark System, and Empirical Study}},
volume = {47},
year = {2021}
}
@article{Decan2018,
abstract = {Software packages developed and distributed through package managers extensively depend on other packages. These dependencies are regularly updated, for example to add new features, resolve bugs or fix security issues. In order to take full advantage of the benefits of this type of reuse, developers should keep their dependencies up to date by relying on the latest releases. In practice, however, this is not always possible, and packages lag behind with respect to the latest version of their dependencies. This phenomenon is described as technical lag in the literature. In this paper, we perform an empirical study of technical lag in the npm dependency network by investigating its evolution for over 1.4M releases of 120K packages and 8M dependencies between these releases. We explore how technical lag increases over time, taking into account the release type and the use of package dependency constraints. We also discuss how technical lag can be reduced by relying on the semantic versioning policy.},
archivePrefix = {arXiv},
arxivId = {1806.01545},
author = {Decan, Alexandre and Mens, Tom and Constantinou, Eleni},
doi = {10.1109/ICSME.2018.00050},
eprint = {1806.01545},
file = {::},
isbn = {9781538678701},
journal = {Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
keywords = {Dependency network,Empirical software engineering,Package distribution,Semantic versioning,Software evolution,Technical lag},
month = {nov},
pages = {404--414},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{On the evolution of technical lag in the npm package dependency network}},
year = {2018}
}
@article{Alshuqayran2016,
abstract = {The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users' machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study focuses on identifying architectural challenges, the architectural diagrams/views and quality attributes related to microsevice systems.},
author = {Alshuqayran, Nuha and Ali, Nour and Evans, Roger},
doi = {10.1109/SOCA.2016.15},
isbn = {9781509047819},
journal = {Proceedings - 2016 IEEE 9th International Conference on Service-Oriented Computing and Applications, SOCA 2016},
month = {dec},
pages = {44--51},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A systematic mapping study in microservice architecture}},
year = {2016}
}
@article{Nikolic2021,
author = {Nikolic, Jovan and Jubatyrov, Nursultan and Pournaras, Evangelos},
doi = {10.1109/TNSM.2021.3092939},
issn = {1932-4537},
journal = {IEEE Transactions on Network and Service Management},
month = {sep},
number = {3},
pages = {2728--2741},
title = {{Self-Healing Dilemmas in Distributed Systems: Fault Correction vs. Fault Tolerance}},
url = {https://ieeexplore.ieee.org/document/9466159/},
volume = {18},
year = {2021}
}
