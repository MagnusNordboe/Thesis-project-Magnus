Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@article{Curtis,
author = {Curtis, Bill},
file = {::},
keywords = {cyber resilience,measurement,software resilience,standards},
title = {{How Do You Measure Software Resilience?}},
url = {www.it-cisq.org}
}
@article{Quevedo2007,
abstract = {The selection of a subset of input variables is often based on the previous construction of a ranking to order the variables according to a given criterion of relevancy. The objective is then to linearize the search, estimating the quality of subsets containing the topmost ranked variables. An algorithm devised to rank input variables according to their usefulness in the context of a learning task is presented. This algorithm is the result of a combination of simple and classical techniques, like correlation and orthogonalization, which allow the construction of a fast algorithm that also deals explicitly with redundancy. Additionally, the proposed ranker is endowed with a simple polynomial expansion of the input variables to cope with nonlinear problems. The comparison with some state-of-the-art rankers showed that this combination of simple components is able to yield high-quality rankings of input variables. The experimental validation is made on a wide range of artificial data sets and the quality of the rankings is assessed using a ROC-inspired setting, to avoid biased estimations due to any particular learning algorithm.},
author = {Quevedo, Jos{\'{e}} R and Bahamonde, Antonio and Luaces, Oscar},
doi = {10.1016/j.csda.2007.02.003},
file = {::},
journal = {Computational Statistics {\&} Data Analysis},
keywords = {Dimensionality reduction,Variable ranking},
pages = {578--595},
title = {{A simple and efficient method for variable ranking according to their usefulness for learning}},
url = {www.elsevier.com/locate/csda},
volume = {52},
year = {2007}
}
@article{Gouigoux2017,
abstract = {MGDIS SA is a software editing company that underwent a major strategic and technical change during the past three years, investing 17 300 man. Days rewriting its core business software from monolithic architecture to a Web Oriented Architecture using microservices. The paper presents technical lessons learned during and from this migration by addressing three crucial questions for a successful context-adapted migration towards a Web Oriented Architecture: how to determine (i) the most suitable granularity of micro-services, (ii) the most appropriate deployment and (iii) the most efficient orchestration?},
author = {Gouigoux, Jean Philippe and Tamzalit, Dalila},
doi = {10.1109/ICSAW.2017.35},
isbn = {9781509047932},
journal = {Proceedings - 2017 IEEE International Conference on Software Architecture Workshops, ICSAW 2017: Side Track Proceedings},
keywords = {Microservices,Migration,Web Oriented Architecture},
pages = {62--65},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{From monolith to microservices: Lessons learned on an industrial migration to a web oriented architecture}},
year = {2017}
}
@article{Nedelkoski2019,
abstract = {Artificial Intelligence for IT Operations (AIOps) combines big data and machine learning to replace a broad range of IT Operations tasks including availability, performance, and monitoring of services. By exploiting log, tracing, metric, and network data, AIOps enable detection of faults and issues of services. The focus of this work is on detecting anomalies based on distributed tracing records that contain detailed information for the availability and the response time of the services. In large-scale distributed systems, where a service is deployed on heterogeneous hardware and has multiple scenarios of normal operation, it becomes challenging to detect such anomalous cases. We address the problem by proposing unsupervised, response time anomaly detection based on deep learning data modeling techniques; unsupervised dynamic error threshold approach; tolerance module for false positive reduction; and descriptive classification of the anomalies. The evaluation shows that the approach achieves high accuracy and solid performance in both, experimental testbed and large-scale production cloud.},
author = {Nedelkoski, Sasho and Cardoso, Jorge and Kao, Odej},
doi = {10.1109/CCGRID.2019.00038},
isbn = {9781728109121},
journal = {Proceedings - 19th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing, CCGrid 2019},
keywords = {AIOps,Anomaly detection,Autoencoders,CNNs,Distributed tracing,GRUs,RNNs,Service reliability,Time series},
month = {may},
pages = {241--250},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Anomaly detection and classification using distributed tracing and deep learning}},
year = {2019}
}
@book{Raymond2003,
abstract = {The Art of UNIX Programming poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of "hackers" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.},
author = {Raymond, E.S.},
booktitle = {System},
isbn = {0131429019},
pages = {560},
title = {{The art of Unix programming}},
url = {http://portal.acm.org/citation.cfm?id=829549},
year = {2003}
}
@article{Scalability,
author = {Weinstock, Charles B and Goodenough, John B},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Weinstock, Goodenough - 2006 - On System Scalability.pdf:pdf},
journal = {U.S. Ministry of defence},
title = {{On System Scalability}},
url = {http://www.sei.cmu.edu/publications/pubweb.html},
year = {2006}
}
@misc{DgtlInfra,
author = {Infra, Dgtl},
title = {{Top 10 Cloud Service Providers Globally in 2023 - Dgtl Infra}},
url = {https://dgtlinfra.com/top-10-cloud-service-providers-2022/},
urldate = {2023-06-28}
}
@techreport{Baeza-Yates,
abstract = {Big data nowadays is a fashionable topic, independently of what people mean when they use this term. The challenges include how to capture, transfer, store, clean, analyze, filter, search, share, and visualize such data. But being big is just a matter of volume, although there is no clear agreement in the size threshold where big starts. Indeed, it is easy to capture large amounts of data using a brute force approach. So the real goal should not be big data but to ask ourselves, for a given problem, what is the right data and how much of it is needed.1 For some problems this would imply big data, but for the majority of the problems much less data is necessary. In this position paper we explore the trade-offs involved and the main problems that come with big data: scalability, redundancy, bias, noise, spam, and privacy.},
author = {Herold, Benjamin},
booktitle = {Education Week},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baeza-Yates - Unknown - Big Data or Right Data.pdf:pdf},
isbn = {16130073 (ISSN)},
issn = {16130073},
keywords = {Bias,Noise,Privacy,Redundancy,Scalability,Spam,Sparsity},
number = {17},
pages = {4},
title = {{Big Data or Big Brother?}},
url = {http://sourceforge.net/projects/supersensetag/.},
volume = {35},
year = {2016}
}
@misc{Weaveworks,
author = {Weaveworks},
title = {{Microservices Demo: Sock Shop}},
url = {https://microservices-demo.github.io/},
urldate = {2023-06-30}
}
@misc{Locustio,
author = {Locustio},
title = {{locustio/locust: Write scalable load tests in plain Python}},
url = {https://github.com/locustio/locust},
urldate = {2023-03-27}
}
@article{Bogatinovski,
abstract = {Artificial Intelligence for IT Operations (AIOps) combines big data and machine learning to replace a broad range of IT Operations tasks including reliability and performance monitoring of services. By exploiting observability data, AIOps enable detection of faults and issues of services. The focus of this work is on detecting anomalies based on distributed tracing records that contain detailed information of the services of the distributed system. Timely and accurately detecting trace anomalies is very challenging due to the large number of underlying microservices and the complex call relationships between them. We addresses the problem anomaly detection from distributed traces with a novel self-supervised method and a new learning task formulation. The method is able to have high performance even in large traces and capture complex interactions between the services. The evaluation shows that the approach achieves high accuracy and solid performance in the experimental testbed.},
author = {Bogatinovski, Jasmin and Nedelkoski, Sasho and Cardoso, Jorge and Kao, Odej},
doi = {10.1109/UCC48980.2020.00054},
file = {::},
isbn = {9780738123943},
journal = {Proceedings - 2020 IEEE/ACM 13th International Conference on Utility and Cloud Computing, UCC 2020},
keywords = {Anomaly detection,Distributed systems,Distributed traces,Self-supervised learning},
month = {dec},
pages = {342--347},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Self-supervised anomaly detection from distributed traces}},
year = {2020}
}
@article{Du2018,
abstract = {With emerging container technologies, such as Docker, microservices-based applications can be developed and deployed in cloud environment much agiler. The dependability of these microservices becomes a major concern of application providers. Anomalous behaviors which may lead to unexpected failures can be detected with anomaly detection techniques. In this paper, an anomaly detection system (ADS) is designed to detect and diagnose the anomalies in microservices by monitoring and analyzing real-time performance data of them. The proposed ADS consists of a monitoring module that collects the performance data of containers, a data processing module based on machine learning models and a fault injection module integrated for training these models. The fault injection module is also used to assess the anomaly detection and diagnosis performance of our ADS. Clearwater, an open source virtual IP Multimedia Subsystem, is used for the validation of our ADS and experimental results show that the proposed ADS works well.},
author = {Du, Qingfeng and Xie, Tiandi and He, Yu},
doi = {10.1007/978-3-030-05063-4_42},
file = {:home/magnus/Documents/Master/Performance related articles/Anomaly detection with machine learning.pdf:pdf},
isbn = {9783030050627},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Anomaly detection,Machine learning,Microservices,Performance monitoring},
pages = {560--572},
title = {{Anomaly detection and diagnosis for container-based microservices with performance monitoring}},
volume = {11337 LNCS},
year = {2018}
}
@inproceedings{Sergeev2022,
abstract = {At the moment, Docker technology is becoming more prevalent in the Windows environment. The pertinent topic in this regard is how Docker containers running on the Windows operating system would behave in the event of a resource deficit. The article discusses circumstances in which there is insufficient processor or RAM to service all running containers. It is proposed to employ stress and volume testing to investigate the stability and reliability of Docker containers. The purpose of stress testing is to determine how the system behaves when the load on the application is greatly increased in comparison to what was initially expected. By delivering enormous amounts of data for processing, volume testing is accomplished. To assess container performance during stress testing, a Prometheus-based technology stack is used. Docker containers running in a Windows system have been shown to operate predictably under extreme load conditions. As the processor load increases, the performance of the containerized program drops proportionately to the decrease in processor time allocated. When there is insufficient RAM to run all containers, Docker uses virtual memory to dynamically distribute memory amongst containers. If a container's execution is halted due to a lack of available RAM on the system, the container's execution is terminated. Other containers continue to function normally.},
author = {Sergeev, A. and Rezedinova, E. and Khakhina, A.},
booktitle = {Journal of Physics: Conference Series},
doi = {10.1088/1742-6596/2339/1/012010},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sergeev, Rezedinova, Khakhina - 2022 - Stress testing of Docker containers running on a Windows operating system.pdf:pdf},
issn = {17426596},
number = {1},
publisher = {Institute of Physics},
title = {{Stress testing of Docker containers running on a Windows operating system}},
volume = {2339},
year = {2022}
}
@misc{Fowler2014,
author = {Fowler, Martin},
title = {{Microservices}},
url = {https://martinfowler.com/articles/microservices.html},
urldate = {2022-01-31},
year = {2014}
}
@misc{USAToday,
author = {Schmidt, Julie},
booktitle = {USA Today},
title = {{USATODAY.com - Comair to replace old system that failed}},
url = {https://web.archive.org/web/20210126095521/https://usatoday30.usatoday.com/money/biztravel/2004-12-28-comair-usat{\_}x.htm},
urldate = {2023-07-04},
year = {2004}
}
@article{Gan2019,
abstract = {Cloud services have recently started undergoing a major shift from monolithic applications, to graphs of hundreds of loosely-coupled microservices. Microservices fundamentally change a lot of assumptions current cloud systems are designed with, and present both opportunities and challenges when optimizing for quality of service (QoS) and utilization. In this paper we explore the implications microservices have across the cloud system stack. We first present Death- StarBench, a novel, open-source benchmark suite built with microservices that is representative of large end-to-end services, modular and extensible. DeathStarBench includes a social network, a media service, an e-commerce site, a banking system, and IoT applications for coordination control of UAV swarms. We then use DeathStarBench to study the architectural characteristics of microservices, their implications in networking and operating systems, their challenges with respect to cluster management, and their trade-offs in terms of application design and programming frameworks. Finally, we explore the tail at scale effects of microservices in real deployments with hundreds of users, and highlight the increased pressure they put on performance predictability.},
author = {Gan, Yu and Zhang, Yanqi and Cheng, Dailun and Shetty, Ankitha and Rathi, Priyal and Katarki, Nayan and Bruno, Ariana and Hu, Justin and Ritchken, Brian and Jackson, Brendon and Hu, Kelvin and Pancholi, Meghna and He, Yuan and Clancy, Brett and Colen, Chris and Wen, Fukang and Leung, Catherine and Wang, Siyuan and Zaruvinsky, Leon and Espinosa, Mateo and Lin, Rick and Liu, Zhongling and Padilla, Jake and Delimitrou, Christina},
doi = {10.1145/3297858.3304013},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gan et al. - 2019 - An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud {\&} Edge Systems.pdf:pdf},
isbn = {9781450362405},
journal = {International Conference on Architectural Support for Programming Languages and Operating Systems - ASPLOS},
keywords = {QoS,acceleration,cloud computing,cluster management,datacenters,fpga,microservices,serverless},
pages = {3--18},
title = {{An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud {\&} Edge Systems}},
year = {2019}
}
@misc{Scikit-learn-imputation,
abstract = {Overview of imputation techniques in sklearn},
author = {Scikit-learn},
title = {{6.4. Imputation of missing values — scikit-learn 1.2.2 documentation}},
url = {https://scikit-learn.org/stable/modules/impute.html},
urldate = {2023-04-13}
}
@misc{Loukides,
author = {Loukides, Mike and Swoyer, Steve},
title = {{Microservices Adoption in 2020 – O'Reilly}},
url = {https://www.oreilly.com/radar/microservices-adoption-in-2020/},
urldate = {2023-03-27}
}
@misc{Richter,
author = {Richter, Felix},
booktitle = {Statista},
title = {{Cloud providers market share}},
url = {https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/},
year = {2023}
}
@misc{ITS,
abstract = {An application in which the user interface, business rules, and data access code is combined into a single executable program and deployed on one platform. A monolithic application operates independently from other applications, performing every step of the process needed to complete the entire business function. It does not share any logic or data across system or organizational boundaries. Databases are designed for access by single application systems within a single agency, not for access by multiple application systems in multiple agencies simultaneously.},
author = {ITS},
title = {{Glossary}},
url = {https://web.archive.org/web/20070902151937/http://www.its.state.nc.us/Information/Glossary/Glossm.asp},
urldate = {2023-03-27},
year = {2001}
}
@article{Gropp2011,
abstract = {The performance of parallel scientific applications depends on many factors which are determined by the execution environment and the parallel application. Especially on large parallel systems, it is too expensive to explore the solution space with series of experiments. Deriving analytical models for applications and platforms allow estimating and extrapolating their execution performance, bottlenecks, and the potential impact of optimization options. We propose to use such "performance modeling" techniques beginning from the application design process throughout the whole software development cycle and also during the lifetime of supercomputer systems. Such models help to guide supercomputer system design and re-engineering efforts to adopt applications to changing platforms and allow users to estimate costs to solve a particular problem. Models can often be built with the help of well-known performance profiling tools. We discuss how we successfully used modeling throughout the proposal, initial testing, and beginning deployment phase of the Blue Waters supercomputer system. Copyright 2011 ACM.},
author = {Hoefler, Torsten and Gropp, William and Snir, Marc and Kramer, William},
doi = {10.1145/2063348.2063356},
file = {:home/magnus/Documents/Master/Performance related articles/Performance{\_}modeling{\_}for{\_}systematic{\_}performance{\_}tuning.pdf:pdf},
isbn = {9781450311397},
journal = {State of the Practice Reports, SC'11},
publisher = {IEEE},
title = {{Performance modeling for systematic performance tuning}},
year = {2011}
}
@article{Heinrich2017,
abstract = {Microservices complement approaches like DevOps and continuous delivery in terms of software architecture. Along with this architectural style, several important deployment technologies, such as container-based virtualization and container orchestration solutions, have emerged. These technologies allow to efficiently exploit cloud platforms, providing a high degree of scalability, availability, and portability for microservices. Despite the obvious importance of a sufficient level of performance, there is still a lack of performance engineering approaches explicitly taking into account the particularities of microservices. In this paper, we argue why new solutions to performance engineering for microservices are needed. Furthermore, we identify open issues and outline possible re- search directions with regard to performance-Aware testing, monitoring, and modeling of microservices.},
author = {Heinrich, Robert and {Van Hoorn}, Andr{\'{e}} and Knoche, Holger and Li, Fei and Lwakatare, Lucy Ellen and Pahl, Claus and Schulte, Stefan and Wettinger, Johannes},
doi = {10.1145/3053600.3053653},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Heinrich et al. - 2017 - Performance engineering for microservices Research challenges {\&} directions.pdf:pdf},
isbn = {9781450348997},
journal = {ICPE 2017 - Companion of the 2017 ACM/SPEC International Conference on Performance Engineering},
month = {apr},
pages = {223--226},
publisher = {Association for Computing Machinery, Inc},
title = {{Performance engineering for microservices: Research challenges {\&} directions}},
url = {http://dx.doi.org/10.1145/3053600.3053653},
year = {2017}
}
@article{Zhou2021a,
abstract = {Storage services in data centers continuously make decisions, such as for cache admission, prefetching, and block allocation. These decisions are typically driven by heuristics based on statistical properties like temporal locality or common file sizes. The quality of decisions can be improved through application-level information such as the database operation a request belongs to. While such features can be exploited through application hints (e.g., explicit prefetches), this process requires manual work and is thus only viable for the most tuned workloads. In this work, we show how to leverage application-level information automatically, by building on distributed traces that are already available in warehouse-scale computers. As these traces are used for diagnostics and accounting, they contain information about requests, including those to storage services. However, this information is mostly unstructured (e.g., arbitrary text) and thus difficult to use. We demonstrate how to do so automatically using machine learning, by applying ideas from natural language processing. We show that different storage-related decisions can be learned from distributed traces, using models ranging from simple clustering techniques to neural networks. Instead of designing specific models for different storage-related tasks, we show that the same models can be used as building blocks for different tasks. Our models improve prediction accuracy by 11-33{\%} over non-ML baselines, which translates to significantly improving the hit rate of a caching task, as well as improvements to an SSD/HDD tiering task, on production data center storage traces.},
author = {Zhou, Giulio and Maas, Martin},
file = {::},
title = {{LEARNING ON DISTRIBUTED TRACES FOR DATA CENTER STORAGE SYSTEMS}},
year = {2021}
}
@article{Guyon,
abstract = {Variable and feature selection have become the focus of much research in areas of application for which datasets with tens or hundreds of thousands of variables are available. These areas include text processing of internet documents, gene expression array analysis, and combinatorial chemistry. The objective of variable selection is threefold: improving the prediction performance of the pre-dictors, providing faster and more cost-effective predictors, and providing a better understanding of the underlying process that generated the data. The contributions of this special issue cover a wide range of aspects of such problems: providing a better definition of the objective function, feature construction, feature ranking, multivariate feature selection, efficient search methods, and feature validity assessment methods.},
author = {Guyon, Isabelle and De, Andre@tuebingen Mpg},
file = {::},
journal = {Journal of Machine Learning Research},
keywords = {QSAR,Variable selection,bioinformatics,clustering,computational biology,feature selection,filters,gene expression,genomics,information retrieval,information theory,microarray,model selection,pattern discov-ery,proteomics,space dimensionality reduction,statistical testing,support vector machines,text classification,wrappers},
pages = {1157--1182},
title = {{An Introduction to Variable and Feature Selection Andr{\'{e}} Elisseeff}},
volume = {3},
year = {2003}
}
