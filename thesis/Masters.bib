Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{Richter,
author = {Richter, Felix},
booktitle = {Statista},
title = {{No Title}},
url = {https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/},
urldate = {28.06.2023},
year = {2023}
}
@misc{Scikit-learn-imputation,
abstract = {Overview of imputation techniques in sklearn},
author = {Scikit-learn},
title = {{6.4. Imputation of missing values â€” scikit-learn 1.2.2 documentation}},
url = {https://scikit-learn.org/stable/modules/impute.html},
urldate = {2023-04-13}
}
@article{Gan2018,
abstract = {Performance unpredictability in cloud services leads to poor user experience, degraded availability, and has revenue ramifications. Detecting performance degradation a posteriori helps the system take corrective action, but does not avoid the QoS violations. Detecting QoS violations after the fact is even more detrimental when a service consists of hundreds of thousands of loosely-coupled microservices, since performance hiccups can quickly propagate across the dependency graph of microservices. In this work we focus on anticipating QoS violations in cloud settings to mitigate performance unpredictability to begin with. We propose Seer, a cloud runtime that leverages the massive amount of tracing data cloud systems collect over time and a set of practical learning techniques to signal upcoming QoS violations, as well as identify the microservice(s) causing them. Once an imminent QoS violation is detected Seer uses machine-level hardware events to determine the cause of the QoS violation, and adjusts the resource allocations to prevent it. In local clusters with 10 40-core servers and 200-instance clusters on GCE running diverse cloud microservices, we show that Seer correctly anticipates QoS violations 91% of the time, and attributes the violation to the correct microservice in 89% of cases. Finally, Seer detects QoS violations early enough for a corrective action to almost always be applied successfully.},
author = {Gan, Yu and Pancholi, Meghna and Cheng, Dailun and Hu, Siyuan and He, Yuan and Delimitrou, Christina},
file = {::},
isbn = {9781450362405},
journal = {10th USENIX Workshop on Hot Topics in Cloud Computing, HotCloud 2018, co-located with USENIX ATC 2018},
keywords = {acm reference format,bugging,cloud computing,cloud computing, datacenter, performance debugging,data mining,datacenter,deep learning,ing,microservices,monitor-,performance de-,qos,resource management,tracing},
pages = {19--33},
title = {{Seer: Leveraging big data to navigate the complexity of cloud debugging}},
year = {2018}
}
@misc{Fowler2014,
author = {Fowler, Martin},
title = {{Microservices}},
url = {https://martinfowler.com/articles/microservices.html},
urldate = {2022-01-31},
year = {2014}
}
@article{Peffers2014,
abstract = {The paper motivates, presents, demonstrates in use, and evaluates a methodology for conducting design science (DS) research in information systems (IS). DS is of importance in a discipline oriented...},
author = {Peffers, Ken and Tuunanen, Tuure and Rothenberger, Marcus A. and Chatterjee, Samir},
doi = {10.2753/MIS0742-1222240302},
file = {::},
issn = {07421222},
journal = {https://doi-org.ezproxy.uio.no/10.2753/MIS0742-1222240302},
keywords = {case study,design science,design science research,design theory,mental model,methodology,process model},
month = {dec},
number = {3},
pages = {45--77},
publisher = { Routledge },
title = {{A Design Science Research Methodology for Information Systems Research}},
url = {https://www-tandfonline-com.ezproxy.uio.no/doi/abs/10.2753/MIS0742-1222240302},
volume = {24},
year = {2014}
}
@article{Pautasso2017,
abstract = {Service-oriented architecture (SOA) and microservices insiders Mike Amundsen, James Lewis, and Nicolai Josuttis share their experiences and predictions with department editors Cesare Pautasso and Olaf Zimmermann.},
author = {Pautasso, Cesare and Zimmermann, Olaf and Amundsen, Mike and Lewis, James and Josuttis, Nicolai},
doi = {10.1109/MS.2017.24},
file = {::},
issn = {07407459},
journal = {IEEE Software},
keywords = {Conway's law,DDD,Extreme Programming,James Lewis,Mike Amundsen,Nicolai Josuttis,SOA,XP,domain-driven design,microservices,service-oriented architecture,software development,software engineering},
number = {1},
pages = {91--98},
publisher = {IEEE},
title = {{Microservices in Practice, Part 1: Reality Check and Service Design}},
volume = {34},
year = {2017}
}
@article{Gan2019,
abstract = {Cloud services have recently started undergoing a major shift from monolithic applications, to graphs of hundreds of loosely-coupled microservices. Microservices fundamentally change a lot of assumptions current cloud systems are designed with, and present both opportunities and challenges when optimizing for quality of service (QoS) and utilization. In this paper we explore the implications microservices have across the cloud system stack. We first present Death- StarBench, a novel, open-source benchmark suite built with microservices that is representative of large end-to-end services, modular and extensible. DeathStarBench includes a social network, a media service, an e-commerce site, a banking system, and IoT applications for coordination control of UAV swarms. We then use DeathStarBench to study the architectural characteristics of microservices, their implications in networking and operating systems, their challenges with respect to cluster management, and their trade-offs in terms of application design and programming frameworks. Finally, we explore the tail at scale effects of microservices in real deployments with hundreds of users, and highlight the increased pressure they put on performance predictability.},
author = {Gan, Yu and Zhang, Yanqi and Cheng, Dailun and Shetty, Ankitha and Rathi, Priyal and Katarki, Nayan and Bruno, Ariana and Hu, Justin and Ritchken, Brian and Jackson, Brendon and Hu, Kelvin and Pancholi, Meghna and He, Yuan and Clancy, Brett and Colen, Chris and Wen, Fukang and Leung, Catherine and Wang, Siyuan and Zaruvinsky, Leon and Espinosa, Mateo and Lin, Rick and Liu, Zhongling and Padilla, Jake and Delimitrou, Christina},
doi = {10.1145/3297858.3304013},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Gan et al. - 2019 - An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud & Edge Systems.pdf:pdf},
isbn = {9781450362405},
journal = {International Conference on Architectural Support for Programming Languages and Operating Systems - ASPLOS},
keywords = {QoS,acceleration,cloud computing,cluster management,datacenters,fpga,microservices,serverless},
pages = {3--18},
title = {{An Open-Source Benchmark Suite for Microservices and Their Hardware-Software Implications for Cloud & Edge Systems}},
year = {2019}
}
@article{Zhou2021,
abstract = {The complexity and dynamism of microservice systems pose unique challenges to a variety of software engineering tasks such as fault analysis and debugging. In spite of the prevalence and importance of microservices in industry, there is limited research on the fault analysis and debugging of microservice systems. To fill this gap, we conduct an industrial survey to learn typical faults of microservice systems, current practice of debugging, and the challenges faced by developers in practice. We then develop a medium-size benchmark microservice system (being the largest and most complex open source microservice system within our knowledge) and replicate 22 industrial fault cases on it. Based on the benchmark system and the replicated fault cases, we conduct an empirical study to investigate the effectiveness of existing industrial debugging practices and whether they can be further improved by introducing the state-of-the-art tracing and visualization techniques for distributed systems. The results show that the current industrial practices of microservice debugging can be improved by employing proper tracing and visualization techniques and strategies. Our findings also suggest that there is a strong need for more intelligent trace analysis and visualization, e.g., by combining trace visualization and improved fault localization, and employing data-driven and learning-based recommendation for guided visual exploration and comparison of traces.},
author = {Zhou, Xiang and Peng, Xin and Xie, Tao and Sun, Jun and Ji, Chao and Li, Wenhai and Ding, Dan},
doi = {10.1109/TSE.2018.2887384},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Zhou et al. - 2021 - Fault Analysis and Debugging of Microservice Systems Industrial Survey, Benchmark System, and Empirical Study(2).pdf:pdf},
issn = {19393520},
journal = {IEEE Transactions on Software Engineering},
keywords = {Microservices,debugging,fault localization,tracing,visualization},
month = {feb},
number = {2},
pages = {243--260},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Fault Analysis and Debugging of Microservice Systems: Industrial Survey, Benchmark System, and Empirical Study}},
volume = {47},
year = {2021}
}
@article{Gouigoux2017,
abstract = {MGDIS SA is a software editing company that underwent a major strategic and technical change during the past three years, investing 17 300 man. Days rewriting its core business software from monolithic architecture to a Web Oriented Architecture using microservices. The paper presents technical lessons learned during and from this migration by addressing three crucial questions for a successful context-adapted migration towards a Web Oriented Architecture: how to determine (i) the most suitable granularity of micro-services, (ii) the most appropriate deployment and (iii) the most efficient orchestration?},
author = {Gouigoux, Jean Philippe and Tamzalit, Dalila},
doi = {10.1109/ICSAW.2017.35},
isbn = {9781509047932},
journal = {Proceedings - 2017 IEEE International Conference on Software Architecture Workshops, ICSAW 2017: Side Track Proceedings},
keywords = {Microservices,Migration,Web Oriented Architecture},
pages = {62--65},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{From monolith to microservices: Lessons learned on an industrial migration to a web oriented architecture}},
year = {2017}
}
@book{Raymond2003,
abstract = {The Art of UNIX Programming poses the belief that understanding the unwritten UNIX engineering tradition and mastering its design patterns will help programmers of all stripes to become better programmers. This book attempts to capture the engineering wisdom and design philosophy of the UNIX, Linux, and Open Source software development community as it has evolved over the past three decades, and as it is applied today by the most experienced programmers. Eric Raymond offers the next generation of "hackers" the unique opportunity to learn the connection between UNIX philosophy and practice through careful case studies of the very best UNIX/Linux programs.},
author = {Raymond, E.S.},
booktitle = {System},
isbn = {0131429019},
pages = {560},
title = {{The art of Unix programming}},
url = {http://portal.acm.org/citation.cfm?id=829549},
year = {2003}
}
@article{Gropp2011,
abstract = {The performance of parallel scientific applications depends on many factors which are determined by the execution environment and the parallel application. Especially on large parallel systems, it is too expensive to explore the solution space with series of experiments. Deriving analytical models for applications and platforms allow estimating and extrapolating their execution performance, bottlenecks, and the potential impact of optimization options. We propose to use such "performance modeling" techniques beginning from the application design process throughout the whole software development cycle and also during the lifetime of supercomputer systems. Such models help to guide supercomputer system design and re-engineering efforts to adopt applications to changing platforms and allow users to estimate costs to solve a particular problem. Models can often be built with the help of well-known performance profiling tools. We discuss how we successfully used modeling throughout the proposal, initial testing, and beginning deployment phase of the Blue Waters supercomputer system. Copyright 2011 ACM.},
author = {Hoefler, Torsten and Gropp, William and Snir, Marc and Kramer, William},
doi = {10.1145/2063348.2063356},
file = {:home/magnus/Documents/Master/Performance related articles/Performance_modeling_for_systematic_performance_tuning.pdf:pdf},
isbn = {9781450311397},
journal = {State of the Practice Reports, SC'11},
publisher = {IEEE},
title = {{Performance modeling for systematic performance tuning}},
year = {2011}
}
@article{Ahuja2020,
abstract = {Trustworthiness is a central requirement for the acceptance and success of
human-centered artificial intelligence (AI). To deem an AI system as
trustworthy, it is crucial to assess its behaviour and characteristics against
a gold standard of Trustworthy AI, consisting of guidelines, requirements, or
only expectations. While AI systems are highly complex, their implementations
are still based on software. The software engineering community has a
long-established toolbox for the assessment of software systems, especially in
the context of software testing. In this paper, we argue for the application of
software engineering and testing practices for the assessment of trustworthy
AI. We make the connection between the seven key requirements as defined by the
European Commission's AI high-level expert group and established procedures
from software engineering and raise questions for future work.},
archivePrefix = {arXiv},
arxivId = {2007.07768},
author = {Ahuja, Mohit Kumar and Belaid, Mohamed Bachir and Bernab, Pierre and Collet, Mathieu and Gotlieb, Arnaud and Lal, Chhagan and Marijan, Dusica and Sen, Sagar and Sharif, Aizaz and Spieker, Helge},
eprint = {2007.07768},
file = {::},
issn = {16130073},
journal = {CEUR Workshop Proceedings},
month = {jul},
pages = {67--70},
publisher = {CEUR-WS},
title = {{Opening the Software Engineering Toolbox for the Assessment of Trustworthy AI}},
url = {https://arxiv.org/abs/2007.07768v2},
volume = {2659},
year = {2020}
}
@article{Sun2020,
abstract = {Machine learning develops rapidly, which has made many theoretical breakthroughs and is widely applied in various fields. Optimization, as an important part of machine learning, has attracted much attention of researchers. With the exponential growth of data amount and the increase of model complexity, optimization methods in machine learning face more and more challenges. A lot of work on solving optimization problems or improving optimization methods in machine learning has been proposed successively. The systematic retrospect and summary of the optimization methods from the perspective of machine learning are of great significance, which can offer guidance for both developments of optimization and machine learning research. In this article, we first describe the optimization problems in machine learning. Then, we introduce the principles and progresses of commonly used optimization methods. Finally, we explore and give some challenges and open problems for the optimization in machine learning.},
archivePrefix = {arXiv},
arxivId = {1906.06821},
author = {Sun, Shiliang and Cao, Zehui and Zhu, Han and Zhao, Jing},
doi = {10.1109/TCYB.2019.2950779},
eprint = {1906.06821},
file = {::},
issn = {21682275},
journal = {IEEE Transactions on Cybernetics},
keywords = {Approximate Bayesian inference,deep neural network (DNN),machine learning,optimization method,reinforcement learning (RL)},
month = {aug},
number = {8},
pages = {3668--3681},
pmid = {31751262},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A Survey of Optimization Methods from a Machine Learning Perspective}},
volume = {50},
year = {2020}
}
@article{Du2018,
abstract = {With emerging container technologies, such as Docker, microservices-based applications can be developed and deployed in cloud environment much agiler. The dependability of these microservices becomes a major concern of application providers. Anomalous behaviors which may lead to unexpected failures can be detected with anomaly detection techniques. In this paper, an anomaly detection system (ADS) is designed to detect and diagnose the anomalies in microservices by monitoring and analyzing real-time performance data of them. The proposed ADS consists of a monitoring module that collects the performance data of containers, a data processing module based on machine learning models and a fault injection module integrated for training these models. The fault injection module is also used to assess the anomaly detection and diagnosis performance of our ADS. Clearwater, an open source virtual IP Multimedia Subsystem, is used for the validation of our ADS and experimental results show that the proposed ADS works well.},
author = {Du, Qingfeng and Xie, Tiandi and He, Yu},
doi = {10.1007/978-3-030-05063-4_42},
file = {:home/magnus/Documents/Master/Performance related articles/Anomaly detection with machine learning.pdf:pdf},
isbn = {9783030050627},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Anomaly detection,Machine learning,Microservices,Performance monitoring},
pages = {560--572},
title = {{Anomaly detection and diagnosis for container-based microservices with performance monitoring}},
volume = {11337 LNCS},
year = {2018}
}
@inproceedings{Sergeev2022,
abstract = {At the moment, Docker technology is becoming more prevalent in the Windows environment. The pertinent topic in this regard is how Docker containers running on the Windows operating system would behave in the event of a resource deficit. The article discusses circumstances in which there is insufficient processor or RAM to service all running containers. It is proposed to employ stress and volume testing to investigate the stability and reliability of Docker containers. The purpose of stress testing is to determine how the system behaves when the load on the application is greatly increased in comparison to what was initially expected. By delivering enormous amounts of data for processing, volume testing is accomplished. To assess container performance during stress testing, a Prometheus-based technology stack is used. Docker containers running in a Windows system have been shown to operate predictably under extreme load conditions. As the processor load increases, the performance of the containerized program drops proportionately to the decrease in processor time allocated. When there is insufficient RAM to run all containers, Docker uses virtual memory to dynamically distribute memory amongst containers. If a container's execution is halted due to a lack of available RAM on the system, the container's execution is terminated. Other containers continue to function normally.},
author = {Sergeev, A. and Rezedinova, E. and Khakhina, A.},
booktitle = {Journal of Physics: Conference Series},
doi = {10.1088/1742-6596/2339/1/012010},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Sergeev, Rezedinova, Khakhina - 2022 - Stress testing of Docker containers running on a Windows operating system.pdf:pdf},
issn = {17426596},
number = {1},
publisher = {Institute of Physics},
title = {{Stress testing of Docker containers running on a Windows operating system}},
volume = {2339},
year = {2022}
}
@misc{DgtlInfra,
author = {Infra, Dgtl},
title = {{Top 10 Cloud Service Providers Globally in 2023 - Dgtl Infra}},
url = {https://dgtlinfra.com/top-10-cloud-service-providers-2022/},
urldate = {2023-06-28}
}
@article{Decan2018,
abstract = {Software packages developed and distributed through package managers extensively depend on other packages. These dependencies are regularly updated, for example to add new features, resolve bugs or fix security issues. In order to take full advantage of the benefits of this type of reuse, developers should keep their dependencies up to date by relying on the latest releases. In practice, however, this is not always possible, and packages lag behind with respect to the latest version of their dependencies. This phenomenon is described as technical lag in the literature. In this paper, we perform an empirical study of technical lag in the npm dependency network by investigating its evolution for over 1.4M releases of 120K packages and 8M dependencies between these releases. We explore how technical lag increases over time, taking into account the release type and the use of package dependency constraints. We also discuss how technical lag can be reduced by relying on the semantic versioning policy.},
archivePrefix = {arXiv},
arxivId = {1806.01545},
author = {Decan, Alexandre and Mens, Tom and Constantinou, Eleni},
doi = {10.1109/ICSME.2018.00050},
eprint = {1806.01545},
file = {::},
isbn = {9781538678701},
journal = {Proceedings - 2018 IEEE International Conference on Software Maintenance and Evolution, ICSME 2018},
keywords = {Dependency network,Empirical software engineering,Package distribution,Semantic versioning,Software evolution,Technical lag},
month = {nov},
pages = {404--414},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{On the evolution of technical lag in the npm package dependency network}},
year = {2018}
}
@article{Nikolic2021,
author = {Nikolic, Jovan and Jubatyrov, Nursultan and Pournaras, Evangelos},
doi = {10.1109/TNSM.2021.3092939},
issn = {1932-4537},
journal = {IEEE Transactions on Network and Service Management},
month = {sep},
number = {3},
pages = {2728--2741},
title = {{Self-Healing Dilemmas in Distributed Systems: Fault Correction vs. Fault Tolerance}},
url = {https://ieeexplore.ieee.org/document/9466159/},
volume = {18},
year = {2021}
}
@article{Zerouali2018,
abstract = {Software library packages are constantly evolving and increasing in number. Not updating to the latest available release of dependent libraries may negatively affect software development by not benefiting from new functionality, vulnerability and bug fixes available in more recent versions. On the other hand, automatically updating to the latest release may introduce incompatibility issues. We introduce a technical lag metric for dependencies in package networks, in order to assess how outdated a software package is compared to the latest available releases of its dependencies. We empirically analyse the package update practices and technical lag for the npm distribution of JavaScript packages. Our results show a strong presence of technical lag caused by the specific use of dependency constraints, indicating a reluctance to update dependencies to avoid backward incompatible changes.},
author = {Zerouali, Ahmed and Constantinou, Eleni and Mens, Tom and Robles, Gregorio and Gonz{\'{a}}lez-Barahona, Jes{\'{u}}s},
doi = {10.1007/978-3-319-90421-4_6},
file = {::},
isbn = {9783319904207},
issn = {16113349},
journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
keywords = {Package dependency,Software library,Technical lag,npm},
pages = {95--110},
publisher = {Springer Verlag},
title = {{An Empirical Analysis of Technical Lag in npm Package Dependencies}},
volume = {10826 LNCS},
year = {2018}
}
@article{Alshuqayran2016,
abstract = {The accelerating progress of network speed, reliability and security creates an increasing demand to move software and services from being stored and processed locally on users' machines to being managed by third parties that are accessible through the network. This has created the need to develop new software development methods and software architectural styles that meet these new demands. One such example in software architectural design is the recent emergence of the microservices architecture to address the maintenance and scalability demands of online service providers. As microservice architecture is a new research area, the need for a systematic mapping study is crucial in order to summarise the progress so far and identify the gaps and requirements for future studies. In this paper we present a systematic mapping study of microservices architectures and their implementation. Our study focuses on identifying architectural challenges, the architectural diagrams/views and quality attributes related to microsevice systems.},
author = {Alshuqayran, Nuha and Ali, Nour and Evans, Roger},
doi = {10.1109/SOCA.2016.15},
isbn = {9781509047819},
journal = {Proceedings - 2016 IEEE 9th International Conference on Service-Oriented Computing and Applications, SOCA 2016},
month = {dec},
pages = {44--51},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{A systematic mapping study in microservice architecture}},
year = {2016}
}
@article{Al-Shaer2008,
author = {Al-Shaer, Ehab and Chen, Yan},
doi = {10.1016/B978-012373566-9.50018-5},
isbn = {9780123735669},
journal = {Information Assurance},
pages = {489--522},
publisher = {Elsevier Inc.},
title = {{Integrated Fault and Security Management}},
year = {2008}
}
@techreport{Baeza-Yates,
abstract = {Big data nowadays is a fashionable topic, independently of what people mean when they use this term. The challenges include how to capture, transfer, store, clean, analyze, filter, search, share, and visualize such data. But being big is just a matter of volume, although there is no clear agreement in the size threshold where big starts. Indeed, it is easy to capture large amounts of data using a brute force approach. So the real goal should not be big data but to ask ourselves, for a given problem, what is the right data and how much of it is needed.1 For some problems this would imply big data, but for the majority of the problems much less data is necessary. In this position paper we explore the trade-offs involved and the main problems that come with big data: scalability, redundancy, bias, noise, spam, and privacy.},
author = {Herold, Benjamin},
booktitle = {Education Week},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Baeza-Yates - Unknown - Big Data or Right Data.pdf:pdf},
isbn = {16130073 (ISSN)},
issn = {16130073},
keywords = {Bias,Noise,Privacy,Redundancy,Scalability,Spam,Sparsity},
number = {17},
pages = {4},
title = {{Big Data or Big Brother?}},
url = {http://sourceforge.net/projects/supersensetag/.},
volume = {35},
year = {2016}
}
@inproceedings{DiFrancesco2017,
abstract = {Microservices are a new trend rising fast from the enterprise world. Even though the design principles around microservices have been identified, it is difficult to have a clear view of existing research solutions for architecting microservices. In this paper we apply the systematic mapping study methodology to identify, classify, and evaluate the current state of the art on architecting microservices from the following three perspectives: publication trends, focus of research, and potential for industrial adoption. More specifically, we systematically define a classification framework for categorizing the research on architecting microservices and we rigorously apply it to the 71 selected studies. We synthesize the obtained data and produce a clear overview of the state of the art. This gives a solid basis to plan for future research and applications of architecting microservices.},
author = {{Di Francesco}, Paolo and Malavolta, Ivano and Lago, Patricia},
booktitle = {Proceedings - 2017 IEEE International Conference on Software Architecture, ICSA 2017},
doi = {10.1109/ICSA.2017.24},
file = {::},
isbn = {9781509057290},
keywords = {Microservices,Software Architecture,Systematic Mapping Study},
month = {may},
pages = {21--30},
publisher = {Institute of Electrical and Electronics Engineers Inc.},
title = {{Research on Architecting Microservices: Trends, Focus, and Potential for Industrial Adoption}},
year = {2017}
}
@article{Guyon,
abstract = {Variable and feature selection have become the focus of much research in areas of application for which datasets with tens or hundreds of thousands of variables are available. These areas include text processing of internet documents, gene expression array analysis, and combinatorial chemistry. The objective of variable selection is threefold: improving the prediction performance of the pre-dictors, providing faster and more cost-effective predictors, and providing a better understanding of the underlying process that generated the data. The contributions of this special issue cover a wide range of aspects of such problems: providing a better definition of the objective function, feature construction, feature ranking, multivariate feature selection, efficient search methods, and feature validity assessment methods.},
author = {Guyon, Isabelle and De, Andre@tuebingen Mpg},
file = {::},
journal = {Journal of Machine Learning Research},
keywords = {QSAR,Variable selection,bioinformatics,clustering,computational biology,feature selection,filters,gene expression,genomics,information retrieval,information theory,microarray,model selection,pattern discov-ery,proteomics,space dimensionality reduction,statistical testing,support vector machines,text classification,wrappers},
pages = {1157--1182},
title = {{An Introduction to Variable and Feature Selection Andr{\'{e}} Elisseeff}},
volume = {3},
year = {2003}
}
@article{Heinrich2017,
abstract = {Microservices complement approaches like DevOps and continuous delivery in terms of software architecture. Along with this architectural style, several important deployment technologies, such as container-based virtualization and container orchestration solutions, have emerged. These technologies allow to efficiently exploit cloud platforms, providing a high degree of scalability, availability, and portability for microservices. Despite the obvious importance of a sufficient level of performance, there is still a lack of performance engineering approaches explicitly taking into account the particularities of microservices. In this paper, we argue why new solutions to performance engineering for microservices are needed. Furthermore, we identify open issues and outline possible re- search directions with regard to performance-Aware testing, monitoring, and modeling of microservices.},
author = {Heinrich, Robert and {Van Hoorn}, Andr{\'{e}} and Knoche, Holger and Li, Fei and Lwakatare, Lucy Ellen and Pahl, Claus and Schulte, Stefan and Wettinger, Johannes},
doi = {10.1145/3053600.3053653},
file = {:home/magnus/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Heinrich et al. - 2017 - Performance engineering for microservices Research challenges & directions.pdf:pdf},
isbn = {9781450348997},
journal = {ICPE 2017 - Companion of the 2017 ACM/SPEC International Conference on Performance Engineering},
month = {apr},
pages = {223--226},
publisher = {Association for Computing Machinery, Inc},
title = {{Performance engineering for microservices: Research challenges & directions}},
url = {http://dx.doi.org/10.1145/3053600.3053653},
year = {2017}
}
@misc{ITS,
abstract = {An application in which the user interface, business rules, and data access code is combined into a single executable program and deployed on one platform. A monolithic application operates independently from other applications, performing every step of the process needed to complete the entire business function. It does not share any logic or data across system or organizational boundaries. Databases are designed for access by single application systems within a single agency, not for access by multiple application systems in multiple agencies simultaneously.},
author = {ITS},
title = {{Glossary}},
url = {https://web.archive.org/web/20070902151937/http://www.its.state.nc.us/Information/Glossary/Glossm.asp},
urldate = {2023-03-27},
year = {2001}
}
@misc{Fowler2015,
abstract = {Many development teams have found the microservices architectural style to be a superior approach to a monolithic architecture. But other teams have found them to be a productivity-sapping burden. Like any architectural style, microservices bring costs and benefits. To make a sensible choice you have to understand these and apply them to your specific context.},
author = {Fowler, Martin},
pages = {1--14},
title = {{Microservice Trade-Offs}},
url = {https://martinfowler.com/articles/microservice-trade-offs.html},
urldate = {2022-01-31},
year = {2015}
}
@misc{Loukides,
author = {Loukides, Mike and Swoyer, Steve},
title = {{Microservices Adoption in 2020 â€“ O'Reilly}},
url = {https://www.oreilly.com/radar/microservices-adoption-in-2020/},
urldate = {2023-03-27}
}
@article{Zeng,
abstract = {With the demand of agile development and management , cloud applications today are moving towards a more fine-grained microservice paradigm, where smaller and simpler functioning parts are combined for providing end-to-end services. In recent years, we have witnessed many research efforts that strive to optimize the performance of cloud computing system in this new era. This paper provides an overview of existing works on recent system performance optimization techniques and classify them based on their design focuses. We also identify open issues and challenges in this important research direction.},
author = {Zeng, Rong and Hou, Xiaofeng and Zhang, Lu and Zheng, Wenli and Guo, Minyi},
doi = {10.1007/s11704-020-0072-3},
file = {::},
keywords = {challenges,cloud computing system,microservice,opportunities,perfor-mance optimization},
title = {{Performance optimization for cloud computing systems in the microservice era: state-of-the-art and research opportunities}},
url = {https://doi.org/10.1007/s11704-020-0072-3}
}
@misc{Locustio,
author = {Locustio},
title = {{locustio/locust: Write scalable load tests in plain Python}},
url = {https://github.com/locustio/locust},
urldate = {2023-03-27}
}
